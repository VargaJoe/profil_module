// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Body /> mount rendering when data is added Match to snapshot 1`] = `
<BrowserRouter>
  <Router
    history={
      Object {
        "action": "REPLACE",
        "block": [Function],
        "createHref": [Function],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "key": "tsknke",
          "pathname": "/login",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <Provider
      store={
        Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        }
      }
    >
      <withRouter(Connect(BodyComponent))
        loginState="Unauthenticated"
        userName="Visitor"
      >
        <Route
          render={[Function]}
        >
          <Connect(BodyComponent)
            history={
              Object {
                "action": "REPLACE",
                "block": [Function],
                "createHref": [Function],
                "go": [Function],
                "goBack": [Function],
                "goForward": [Function],
                "length": 1,
                "listen": [Function],
                "location": Object {
                  "hash": "",
                  "key": "tsknke",
                  "pathname": "/login",
                  "search": "",
                  "state": undefined,
                },
                "push": [Function],
                "replace": [Function],
              }
            }
            location={
              Object {
                "hash": "",
                "key": "tsknke",
                "pathname": "/login",
                "search": "",
                "state": undefined,
              }
            }
            loginState="Unauthenticated"
            match={
              Object {
                "isExact": false,
                "params": Object {},
                "path": "/",
                "url": "/",
              }
            }
            userName="Visitor"
          >
            <BodyComponent
              dispatch={[Function]}
              history={
                Object {
                  "action": "REPLACE",
                  "block": [Function],
                  "createHref": [Function],
                  "go": [Function],
                  "goBack": [Function],
                  "goForward": [Function],
                  "length": 1,
                  "listen": [Function],
                  "location": Object {
                    "hash": "",
                    "key": "tsknke",
                    "pathname": "/login",
                    "search": "",
                    "state": undefined,
                  },
                  "push": [Function],
                  "replace": [Function],
                }
              }
              location={
                Object {
                  "hash": "",
                  "key": "tsknke",
                  "pathname": "/login",
                  "search": "",
                  "state": undefined,
                }
              }
              loginState="Unauthenticated"
              match={
                Object {
                  "isExact": false,
                  "params": Object {},
                  "path": "/",
                  "url": "/",
                }
              }
              userLoginState="Unauthenticated"
              userName="Visitor"
            >
              <div
                className="content_to_right"
              >
                <Header>
                  <header
                    className="sn_header"
                  >
                    <div
                      className="sn_wrapp"
                    >
                      <div
                        className="sn_header__search"
                      >
                        <input
                          type="text"
                        />
                        <button>
                          <i
                            className="fi flaticon-magnifier"
                          />
                        </button>
                      </div>
                    </div>
                  </header>
                </Header>
                <Sidebar
                  openMenu={[Function]}
                >
                  <div
                    className="sn_sidebar"
                  >
                    <LogoComponent
                      openMenu={[Function]}
                    >
                      <div
                        className="sn_sidebar__logo"
                      >
                        <Link
                          replace={false}
                          to="/"
                        >
                          <a
                            href="/"
                            onClick={[Function]}
                          >
                            <img
                              alt="site logo"
                              src="logo.png"
                            />
                          </a>
                        </Link>
                        <div
                          className="sn_menu"
                          onClick={[Function]}
                        >
                          <span />
                        </div>
                      </div>
                    </LogoComponent>
                    <Connect(SidebarUserComponent)>
                      <SidebarUserComponent
                        dispatch={[Function]}
                        user={Object {}}
                        userName="Visitor"
                      >
                        <Link
                          replace={false}
                          to="/user/Visitor"
                        >
                          <a
                            href="/user/Visitor"
                            onClick={[Function]}
                          >
                            <div
                              className="sn_sidebar__user"
                            >
                              <span
                                className="sn_sidebar__user__avatar--default"
                              >
                                <i
                                  className="fi flaticon-user"
                                />
                              </span>
                              <div
                                className="sn_sidebar__user__name"
                              />
                            </div>
                          </a>
                        </Link>
                      </SidebarUserComponent>
                    </Connect(SidebarUserComponent)>
                    <Connect(MenuComponent)>
                      <MenuComponent
                        getMenuItems={[Function]}
                        logout={[Function]}
                        userLoginState="Unauthenticated"
                      />
                    </Connect(MenuComponent)>
                  </div>
                </Sidebar>
                <div
                  className="sn_overflow"
                />
                <main
                  className="sn_main"
                >
                  <div
                    className="sn_wrapp"
                  >
                    <Switch />
                  </div>
                </main>
              </div>
            </BodyComponent>
          </Connect(BodyComponent)>
        </Route>
      </withRouter(Connect(BodyComponent))>
    </Provider>
  </Router>
</BrowserRouter>
`;

exports[`<Body /> mount rendering when data is added Match to snapshot 2`] = `
<div
  className="content_to_right"
>
  <Header />
  <Sidebar
    openMenu={[Function]}
  />
  <div
    className="sn_overflow"
  />
  <main
    className="sn_main"
  >
    <div
      className="sn_wrapp"
    >
      <Switch>
        <Route
          exact={true}
          path="/"
          render={[Function]}
        />
        <Route
          exact={true}
          path="/otherUser"
          render={[Function]}
        />
        <Route
          exact={true}
          path="/user/:user"
          render={[Function]}
          userName="Visitor"
        />
        <Route
          exact={true}
          path="/editUser"
          render={[Function]}
        />
        <Route
          key="usermanagement"
          path="/Usermanagement/:action/:guid"
          render={[Function]}
        />
        <Route
          exact={true}
          path="/changePass"
          render={[Function]}
        />
        <Route
          key="usermanagement"
          path="/forgottenPassword"
          render={[Function]}
        />
      </Switch>
    </div>
  </main>
</div>
`;

exports[`<Body /> mount rendering when data is added Match to snapshot with status flase 1`] = `
<BrowserRouter>
  <Router
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "createHref": [Function],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "key": "tsknke",
          "pathname": "/login",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <Provider
      store={
        Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        }
      }
    >
      <withRouter(Connect(BodyComponent))
        loginState="Unauthenticated"
        userName="Visitor"
      >
        <Route
          render={[Function]}
        >
          <Connect(BodyComponent)
            history={
              Object {
                "action": "POP",
                "block": [Function],
                "createHref": [Function],
                "go": [Function],
                "goBack": [Function],
                "goForward": [Function],
                "length": 1,
                "listen": [Function],
                "location": Object {
                  "hash": "",
                  "key": "tsknke",
                  "pathname": "/login",
                  "search": "",
                  "state": undefined,
                },
                "push": [Function],
                "replace": [Function],
              }
            }
            location={
              Object {
                "hash": "",
                "key": "tsknke",
                "pathname": "/login",
                "search": "",
                "state": undefined,
              }
            }
            loginState="Unauthenticated"
            match={
              Object {
                "isExact": false,
                "params": Object {},
                "path": "/",
                "url": "/",
              }
            }
            userName="Visitor"
          >
            <BodyComponent
              dispatch={[Function]}
              history={
                Object {
                  "action": "POP",
                  "block": [Function],
                  "createHref": [Function],
                  "go": [Function],
                  "goBack": [Function],
                  "goForward": [Function],
                  "length": 1,
                  "listen": [Function],
                  "location": Object {
                    "hash": "",
                    "key": "tsknke",
                    "pathname": "/login",
                    "search": "",
                    "state": undefined,
                  },
                  "push": [Function],
                  "replace": [Function],
                }
              }
              location={
                Object {
                  "hash": "",
                  "key": "tsknke",
                  "pathname": "/login",
                  "search": "",
                  "state": undefined,
                }
              }
              loginState="Unauthenticated"
              match={
                Object {
                  "isExact": false,
                  "params": Object {},
                  "path": "/",
                  "url": "/",
                }
              }
              userLoginState="Unauthenticated"
              userName="Visitor"
            >
              <div
                className="content_to_right"
              >
                <Header>
                  <header
                    className="sn_header"
                  >
                    <div
                      className="sn_wrapp"
                    >
                      <div
                        className="sn_header__search"
                      >
                        <input
                          type="text"
                        />
                        <button>
                          <i
                            className="fi flaticon-magnifier"
                          />
                        </button>
                      </div>
                    </div>
                  </header>
                </Header>
                <Sidebar
                  openMenu={[Function]}
                >
                  <div
                    className="sn_sidebar"
                  >
                    <LogoComponent
                      openMenu={[Function]}
                    >
                      <div
                        className="sn_sidebar__logo"
                      >
                        <Link
                          replace={false}
                          to="/"
                        >
                          <a
                            href="/"
                            onClick={[Function]}
                          >
                            <img
                              alt="site logo"
                              src="logo.png"
                            />
                          </a>
                        </Link>
                        <div
                          className="sn_menu"
                          onClick={[Function]}
                        >
                          <span />
                        </div>
                      </div>
                    </LogoComponent>
                    <Connect(SidebarUserComponent)>
                      <SidebarUserComponent
                        dispatch={[Function]}
                        user={Object {}}
                        userName="Visitor"
                      >
                        <Link
                          replace={false}
                          to="/user/Visitor"
                        >
                          <a
                            href="/user/Visitor"
                            onClick={[Function]}
                          >
                            <div
                              className="sn_sidebar__user"
                            >
                              <span
                                className="sn_sidebar__user__avatar--default"
                              >
                                <i
                                  className="fi flaticon-user"
                                />
                              </span>
                              <div
                                className="sn_sidebar__user__name"
                              />
                            </div>
                          </a>
                        </Link>
                      </SidebarUserComponent>
                    </Connect(SidebarUserComponent)>
                    <Connect(MenuComponent)>
                      <MenuComponent
                        getMenuItems={[Function]}
                        logout={[Function]}
                        userLoginState="Unauthenticated"
                      />
                    </Connect(MenuComponent)>
                  </div>
                </Sidebar>
                <div
                  className="sn_overflow"
                />
                <main
                  className="sn_main"
                >
                  <div
                    className="sn_wrapp"
                  >
                    <Switch />
                  </div>
                </main>
              </div>
            </BodyComponent>
          </Connect(BodyComponent)>
        </Route>
      </withRouter(Connect(BodyComponent))>
    </Provider>
  </Router>
</BrowserRouter>
`;

exports[`<Body /> mount rendering when data is added Match to snapshot with status true 1`] = `
<BrowserRouter>
  <Router
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "createHref": [Function],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "key": "tsknke",
          "pathname": "/login",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <Provider
      store={
        Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        }
      }
    >
      <withRouter(Connect(BodyComponent))
        loginState="Unauthenticated"
        userName="Visitor"
      >
        <Route
          render={[Function]}
        >
          <Connect(BodyComponent)
            history={
              Object {
                "action": "POP",
                "block": [Function],
                "createHref": [Function],
                "go": [Function],
                "goBack": [Function],
                "goForward": [Function],
                "length": 1,
                "listen": [Function],
                "location": Object {
                  "hash": "",
                  "key": "tsknke",
                  "pathname": "/login",
                  "search": "",
                  "state": undefined,
                },
                "push": [Function],
                "replace": [Function],
              }
            }
            location={
              Object {
                "hash": "",
                "key": "tsknke",
                "pathname": "/login",
                "search": "",
                "state": undefined,
              }
            }
            loginState="Unauthenticated"
            match={
              Object {
                "isExact": false,
                "params": Object {},
                "path": "/",
                "url": "/",
              }
            }
            userName="Visitor"
          >
            <BodyComponent
              dispatch={[Function]}
              history={
                Object {
                  "action": "POP",
                  "block": [Function],
                  "createHref": [Function],
                  "go": [Function],
                  "goBack": [Function],
                  "goForward": [Function],
                  "length": 1,
                  "listen": [Function],
                  "location": Object {
                    "hash": "",
                    "key": "tsknke",
                    "pathname": "/login",
                    "search": "",
                    "state": undefined,
                  },
                  "push": [Function],
                  "replace": [Function],
                }
              }
              location={
                Object {
                  "hash": "",
                  "key": "tsknke",
                  "pathname": "/login",
                  "search": "",
                  "state": undefined,
                }
              }
              loginState="Unauthenticated"
              match={
                Object {
                  "isExact": false,
                  "params": Object {},
                  "path": "/",
                  "url": "/",
                }
              }
              userLoginState="Unauthenticated"
              userName="Visitor"
            >
              <div
                className="content_to_right"
              >
                <Header>
                  <header
                    className="sn_header"
                  >
                    <div
                      className="sn_wrapp"
                    >
                      <div
                        className="sn_header__search"
                      >
                        <input
                          type="text"
                        />
                        <button>
                          <i
                            className="fi flaticon-magnifier"
                          />
                        </button>
                      </div>
                    </div>
                  </header>
                </Header>
                <Sidebar
                  openMenu={[Function]}
                >
                  <div
                    className="sn_sidebar"
                  >
                    <LogoComponent
                      openMenu={[Function]}
                    >
                      <div
                        className="sn_sidebar__logo"
                      >
                        <Link
                          replace={false}
                          to="/"
                        >
                          <a
                            href="/"
                            onClick={[Function]}
                          >
                            <img
                              alt="site logo"
                              src="logo.png"
                            />
                          </a>
                        </Link>
                        <div
                          className="sn_menu"
                          onClick={[Function]}
                        >
                          <span />
                        </div>
                      </div>
                    </LogoComponent>
                    <Connect(SidebarUserComponent)>
                      <SidebarUserComponent
                        dispatch={[Function]}
                        user={Object {}}
                        userName="Visitor"
                      >
                        <Link
                          replace={false}
                          to="/user/Visitor"
                        >
                          <a
                            href="/user/Visitor"
                            onClick={[Function]}
                          >
                            <div
                              className="sn_sidebar__user"
                            >
                              <span
                                className="sn_sidebar__user__avatar--default"
                              >
                                <i
                                  className="fi flaticon-user"
                                />
                              </span>
                              <div
                                className="sn_sidebar__user__name"
                              />
                            </div>
                          </a>
                        </Link>
                      </SidebarUserComponent>
                    </Connect(SidebarUserComponent)>
                    <Connect(MenuComponent)>
                      <MenuComponent
                        getMenuItems={[Function]}
                        logout={[Function]}
                        userLoginState="Unauthenticated"
                      />
                    </Connect(MenuComponent)>
                  </div>
                </Sidebar>
                <div
                  className="sn_overflow"
                />
                <main
                  className="sn_main"
                >
                  <div
                    className="sn_wrapp"
                  >
                    <Switch />
                  </div>
                </main>
              </div>
            </BodyComponent>
          </Connect(BodyComponent)>
        </Route>
      </withRouter(Connect(BodyComponent))>
    </Provider>
  </Router>
</BrowserRouter>
`;
